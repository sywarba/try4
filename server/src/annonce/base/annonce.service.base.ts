/*
//------------------------------------------------------------------------------ 
// This code was generated by Amplication. 
// 
// Changes to this file will be lost if the code is regenerated. 
//
// There are other ways to to customize your code, see this doc to learn more
// https://docs.amplication.com/docs/how-to/custom-code
//
//------------------------------------------------------------------------------
  */
import { PrismaService } from "nestjs-prisma";
import { Inject } from "@nestjs/common";
import { Prisma, Annonce, Interaction, User } from "@prisma/client";
import { PaginatedInterface } from "../../util/PaginatedInterface";
import { Logger } from "winston";
import { DbService } from "src/dbService/db.service";

export class AnnonceServiceBase {
  constructor(
    protected readonly prisma: DbService,
    @Inject("winston")
    protected readonly logger: Logger
  ) {}

  async count<T extends Prisma.AnnonceFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AnnonceFindManyArgs>
  ): Promise<number> {
    return await this.prisma.annonce.count(args);
  }

  async findMany<T extends Prisma.AnnonceFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AnnonceFindManyArgs>
  ): Promise<PaginatedInterface<Annonce>> {
    const [data, totalCount] = await Promise.all([
      this.prisma.annonce.findMany(args),
      this.prisma.annonce.count({ where: { deletedAt: null } }),
    ]);

    return { paginatedResult: data, totalCount };
  }
  async findOne<T extends Prisma.AnnonceFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AnnonceFindUniqueArgs>
  ): Promise<Annonce | null> {
    return await this.prisma.annonce.findUnique(args);
  }
  async create<T extends Prisma.AnnonceCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AnnonceCreateArgs>
  ): Promise<Annonce> {
    return await this.prisma.annonce.create<T>(args);
  }
  async createMany<T extends Prisma.AnnonceCreateManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AnnonceCreateManyArgs>
  ): Promise<Prisma.BatchPayload> {
    return await this.prisma.annonce.createMany<T>(args);
  }
  async update<T extends Prisma.AnnonceUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AnnonceUpdateArgs>
  ): Promise<Annonce> {
    return await this.prisma.annonce.update<T>(args);
  }
  async delete<T extends Prisma.AnnonceDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.AnnonceDeleteArgs>
  ): Promise<Annonce> {
    return await this.prisma.annonce.delete(args);
  }

  async updateMany<T extends Prisma.AnnonceUpdateManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AnnonceUpdateManyArgs>
  ): Promise<Prisma.BatchPayload> {
    return await this.prisma.annonce.updateMany(args);
  }

  async findInteractions(
    parentId: string,
    args: Prisma.InteractionFindManyArgs
  ): Promise<Interaction[] | null> {
    return this.prisma.annonce
      .findUnique({
        where: { id: parentId },
      })
      .interactions(args);
  }

  async getUsers(parentId: string): Promise<User | null> {
    return this.prisma.annonce
      .findUnique({
        where: { id: parentId },
      })
      .users();
  }
}
