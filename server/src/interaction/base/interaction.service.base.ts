/*
//------------------------------------------------------------------------------ 
// This code was generated by Amplication. 
// 
// Changes to this file will be lost if the code is regenerated. 
//
// There are other ways to to customize your code, see this doc to learn more
// https://docs.amplication.com/docs/how-to/custom-code
//
//------------------------------------------------------------------------------
  */
import { PrismaService } from "nestjs-prisma";
import { Inject } from "@nestjs/common";
import { Prisma, Interaction, User, Annonce } from "@prisma/client";
import { PaginatedInterface } from "../../util/PaginatedInterface";
import { Logger } from "winston";
import { DbService } from "src/dbService/db.service";

export class InteractionServiceBase {
  constructor(
    protected readonly prisma: DbService,
    @Inject("winston")
    protected readonly logger: Logger
  ) {}

  async count<T extends Prisma.InteractionFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.InteractionFindManyArgs>
  ): Promise<number> {
    return await this.prisma.interaction.count(args);
  }

  async findMany<T extends Prisma.InteractionFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.InteractionFindManyArgs>
  ): Promise<PaginatedInterface<Interaction>> {
    const [data, totalCount] = await Promise.all([
      this.prisma.interaction.findMany(args),
      this.prisma.interaction.count({ where: { deletedAt: null } }),
    ]);

    return { paginatedResult: data, totalCount };
  }
  async findOne<T extends Prisma.InteractionFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.InteractionFindUniqueArgs>
  ): Promise<Interaction | null> {
    return await this.prisma.interaction.findUnique(args);
  }
  async create<T extends Prisma.InteractionCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.InteractionCreateArgs>
  ): Promise<Interaction> {
    return await this.prisma.interaction.create<T>(args);
  }
  async createMany<T extends Prisma.InteractionCreateManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.InteractionCreateManyArgs>
  ): Promise<Prisma.BatchPayload> {
    return await this.prisma.interaction.createMany<T>(args);
  }
  async update<T extends Prisma.InteractionUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.InteractionUpdateArgs>
  ): Promise<Interaction> {
    return await this.prisma.interaction.update<T>(args);
  }
  async delete<T extends Prisma.InteractionDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.InteractionDeleteArgs>
  ): Promise<Interaction> {
    return await this.prisma.interaction.delete(args);
  }

  async updateMany<T extends Prisma.InteractionUpdateManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.InteractionUpdateManyArgs>
  ): Promise<Prisma.BatchPayload> {
    return await this.prisma.interaction.updateMany(args);
  }

  async getUser(parentId: string): Promise<User | null> {
    return this.prisma.interaction
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }

  async getAnnonce(parentId: string): Promise<Annonce | null> {
    return this.prisma.interaction
      .findUnique({
        where: { id: parentId },
      })
      .annonce();
  }
}
